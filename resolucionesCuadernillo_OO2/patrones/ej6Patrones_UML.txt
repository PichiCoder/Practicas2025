@startuml

/'se trata de estados, por como esta la excursion. 
Provisoria cuando aun no alcanzo cupo minimo 
Definitiva cuando se alcanzo el minimo '/

class Excursion <<Context>>{
    -nombre : String
    -fechaInicio : LocalDate
    -fechaFin : LocalDate
    -puntoEncuentro : String
    -costo : Real
    -cupoMin : Integer
    -cupoMax : Integer

    +<<create>> Excursion(nombre : String ... cupoMax : Integer)
    +obtenerInformacion() : String
    -informacionBasica() : String
    +inscribir(u : Usuario)
    +mailsInscriptos() : String
    +addAInscriptos(u : Usuario)
    +addAEspera(u : Usuario)
    +setEstado(e : EstadoExcursion)
    +cantidadInscriptos() : Integer
}

abstract class EstadoExcursion <<State>> {
     
    +<<abstract>>informacionParticularDelEstado(ex : Excursion) : String
        /'lo implementa cada estado'/

    +<<abstract>>handleInscripcion(ex : Excursion, u : Usuario)
}


class ExcursionProvisoria <<ConcreteState>> extends EstadoExcursion {
    +informacionParticularDelEstado(ex : Excursion) : String
        /' cantidad de usuarios faltantes para alcanzar el cupo mínimo.'/
    +handleInscripcion(ex : Excursion, u : Usuario)
}

class EstadoDefinitivaCupoCompleto <<ConcreteState>> extends EstadoExcursion {
    +informacionParticularDelEstado(ex : Excursion) : String
        /' vacio porque es igual que lo basico'/
    +handleInscripcion(ex : Excursion, u : Usuario)
}

class EstadoDefinitivaCupoIncompleto <<ConcreteState>> extends EstadoExcursion {
    +informacionParticularDelEstado(ex : Excursion) : String
        /'los mails de los usuarios inscriptos
         y cantidad de usuarios faltantes para alcanzar el cupo máximo.'/
    +handleInscripcion(ex : Excursion, u : Usuario)
}

class Usuario {
    -nombre : String
    -apellido : String
    -email : String

    +<<create>> Usuario (nombre, apellido, email)
    +inscribirmeEnExcursion(e : Excursion)
    
}

Excursion --> "estado 1" EstadoExcursion
Excursion --> "inscriptos *" Usuario
Excursion --> "listaDeEspera *" Usuario
@enduml
